/********* gd.c code ***************/
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>

typedef unsigned char  u8;
typedef unsigned short u16;
typedef unsigned int   u32;

// define shorter TYPES, save typing efforts
typedef struct ext2_group_desc  GD;
typedef struct ext2_super_block SUPER;
typedef struct ext2_inode       INODE;
typedef struct ext2_dir_entry_2 DIR;    // need this for new version of e2fs

GD    *gp;
SUPER *sp;
INODE *ip;
DIR   *dp; 

#define BLKSIZE 1024

char buf[BLKSIZE];
char bufgp[BLKSIZE];
int fd;

/******************* in <ext2fs/ext2_fs.h>*******************************
struct ext2_group_desc
{
	__u32	bg_block_bitmap;	// Blocks bitmap block
	__u32	bg_inode_bitmap;	// Inodes bitmap block
	__u32	bg_inode_table;		// Inodes table block 
	__u16	bg_free_blocks_count;	// Free blocks count 
	__u16	bg_free_inodes_count;	// Free inodes count 
	__u16	bg_used_dirs_count;	// Directories count 
	__u16	bg_pad              // ignore these
};
**********************************************************************/

int get_block(int fd, int blk, char buf[ ])
{
  lseek(fd, (long)blk*BLKSIZE, 0);
  read(fd, buf, BLKSIZE);
}



char *disk = "mydisk";

int main(int argc, char *argv[ ])
{
  u32 testime = 1540356114;
  
  if (argc > 1)
     disk = argv[1];
  fd = open(disk, O_RDONLY);
  if (fd < 0){
    printf("open failed\n");
    exit(1);
  }
  //bmap();
}
